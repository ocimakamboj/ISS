===========================================
DS221: INTRODUCTION TO SCALABLE SYSTEMS
===========================================
ASSIGNMENT 2
POINTS: 150
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-----------------------
PART B
POSTED: 25 SEP, 2018
DUE DATE: 14 OCT, 2018, 11:59PM
-----------------------

-----------------------
SEARCHING [75 points]
-----------------------

1) You need to implement a Dictionary abstract data type that supports insert and fast lookup operations. You may assume that the keys being inserted are unique. You will implement this using a Hashtable, where a hash function maps the given key to an array index. Each item in the array is an unbounded bucket containing <key,value> pairs. You should use the "list" data structure available as part of C++ STL for the bucket implementation. The signature for the Dictionary interface and Hash Table class you will implement are given below. [25 points]

class IDictionary {
	virtual void insert(int , char*) = 0;
 	virtual char* lookup(int) = 0; 
};

class HashTableImpl: public IDictionary {  
	HashTableImpl(int capacity) {  
		// Constructor. Capacity is the table size for the hash range.
		// TODO
	}
};
	

	
2) Perform insert and lookup operations on the HashTable for different input sizes (10^4, 10^5, 10^6, ...), key distributions, and capacities. What is the most number of items you can insert? Compare the empirical performance with the analytical time complexity. Discuss your results. [25 points]



3) Give two other implementations of the dictionary ADT: using an unsorted array (ArrayDictImpl) and a sorted array (BSearchDictImpl), with signatures as given below. For the unsorted array, you may insert an item in the last unused location and do a linear scan for the key lookup. For the sorted array, you should call a sort function after all inserts are done, and for the lookup by key, you should perform a binary search. You should use the qsort Quick Sort function that is part of the C++ STP for the sorting. Compare the performance of the three Dictionary implementations, using both experiments and complexity analysis. [25 points]

class ArrayDictImpl : public IDictionary {
	ArrayDictImpl(int capacity) {
		// Constructor. Capacity is the array size.
		// TODO
	}

};

class BSearchDictImpl : public IDictionary {
	BSearchDictImpl(int capacity) {
		// Constructor. Capacity is the array size.
		// TODO
	}

	void sort() {
		// this sorts the items in the array by their key
		// TODO
	}
};

	
-----------------------
Submission Instructions
-----------------------
1) You are supposed to write all the code and header files yourself following the given instructions. You are not provided any template files. You may use Assignment 2A as an example. Make sure your code is well documented. 5% of weightage goes to following good coding practices (indenting, comments, validations, etc.)

2) You should submit your cpp, header and makefile. The Makefile MUST generate a Runner.o file which we will be using to test your code. The commandline parameters for executing Runner.o is as follows:
	./Runner.o hash <input_size> <insert_file> <lookup_file> <output_file>
	./Runner.o array <input_size> <insert_file> <lookup_file> <output_file>
	./Runner.o bsearch <input_size> <insert_file> <lookup_file> <output_file>

Here, <insert_file> is an input tab separated value (TSV) file that is given to you with keys and values to insert into the Dictionary. In each line, the first column contains the key as a 4-byte unsigned integer and the second column contains characters. A tab character separates the columns in a line and a newline character terminates each line. Sample TSV input files are under /scratch/ds221-2018/map.
The <lookup_file> is an input file which has one unsigned 4-byte integer present in each line. You must search your Dictionary for each key and provide the output in the output file.
The <output_file> should be generated by you as a TSV file. It must contain as many rows as the present in the <lookup_file>. Each row should contain two columns, one with the key given for lookup and another with the value that you looked up for the key from the Dictionary. Follow the same format as <insert_file>. If a lookup key is NOT present in your Dictionary, its value should be set to an empty string. A key may be present in the lookup file multiple times.
E.g., sample commandline calls are:
	./Runner.o hash 100000 /scratch/ds221-2018/map/map100k.tsv  /scratch/ds221-2018/map/lookup100k.txt lookup100k_hash.out
	./Runner.o array 10000 /scratch/ds221-2018/map/map10k.tsv  /scratch/ds221-2018/map/lookup10k.txt lookup10k_arr.out
	./Runner.o bsearch 1000000 /scratch/ds221-2018/map/map1m.tsv  /scratch/ds221-2018/map/lookup1m.txt lookup1m_bs.out

You may generate additional sample lookup files for testing using grep and awk on the input TSV file using the following, where XYZ is replaced by some text/number within the input file.
grep "XYZ" map10m.tsv | awk '{print $1}' >> lookup10m.txt

	
3) Console Output
The Runner.o should print 1 line of console output with the following format:
hash|array|bsearch,insert_count,insert_time_milliseconds,lookup_count,lookup_time_milliseconds
E.g., sample outputs are:
	hash,100000,2846,1000,85
	array,10000,47562,100,6

NOTE: The lookup time MUST NOT include the time for writing the output to file. This means that you will have to lookup and store the results first to calculate the time, before you write the result to the output file. Otherwise, the file write time will dominate over the Dictionary lookup, and the results will not match the algorithmic analysis. 
	You should not print anything else, unless there is an exception.

4) You will make a folder which has the same name as your turing cluster account, say, cdsstudent. The folder should contain the following files with the exact same names:

cdsstudent-2b/
	1. Runner.cpp, and 
	2. Other .cpp and .h files
	3. Makefile - You may define you Makefile based on previous assignment
	4. Runner.o - Compiled output executable for reference. Note that your cpp file will be compiled from scratch using the Makefile, during evaluation.
    5. cdsstudent.pdf - A PDF report containing the algorithmic analysis of your code, and the plots for expected and observed time complexity for each part of the question. Replace cdsstudent with your user name on the turing cluster. NOTE: The report and analysis carries 30% weightage for each problem.

5) Tar and gzip your folder with the name cdsstudent-2b.tar.gz, and email it to Yogesh Simmhan (simmhan@iisc.ac.in) and Manasi Tiwari (manasitiwari@iisc.ac.in) by 11:59 pm on 14th October. You will receive an acknowledgment on Oct 15.



